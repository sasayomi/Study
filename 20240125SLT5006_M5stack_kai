//時刻表示機能追加。肝心の測定が不良。バッテリー残量表示しようとするとシリアル通信できなくなる。
/*
SLT5006(UART) --> Grove -->M5stackBASIC
Yellow--> 1 -->GPIO22
Blue --> 2 -->GPIO21
Red&white --> 3 -->5V
Black--> 4 --> GND
*/

//定義部
#include <M5Stack.h>
//センサ接続用
#include <SoftwareSerial.h> //EspSoftwareSerial必要
//WIFI接続用
#include <ArduinoJson.h>    
#include <WiFi.h>     
//時刻制御用
#include <time.h> 

//バッテリ表示用
#define RGB(r,g,b) (int16_t)(b + (g << 5) + (r << 11)) //色0～31 緑0～63
unsigned long currentMillis;
unsigned long lastupdateMillis = 0;
int lastbattery = -1;

//Wifi制御用
String JsonData;                                            // JSON形式データの格納用
int sdstat = 0;                                             // microSDカードからのデータ読み出し状況（False:0,True:1）
String i_ssid, i_pass;                                      // SSIDとパスワードの格納用

//時刻制御用
char buf[60];
StaticJsonDocument<192> n_jsondata;                         // JSON形式データ格納用メモリの確保
const char* NTPSRV      = "ntp.jst.mfeed.ad.jp";            // NTPサーバーアドレス NTP server address.
const long  GMT_OFFSET  = 9 * 3600;                         // GMT-TOKYO(時差９時間）9 hours time difference.
const int   DAYLIGHT_OFFSET = 0;                            // サマータイム設定なし No daylight saving time setting
struct tm timeInfo;                                         // tmオブジェクトをtimeinfoとして生成
int smin;

//センサ通信用
SoftwareSerial GroveA(21, 22);

int flag;
int size;

void get_wifi_info() {//SSID/PASS取得関数
  M5.Lcd.fillScreen(BLACK); 
  M5.Lcd.setCursor(0, 0); 
  M5.Lcd.setTextSize(2); 

  if (!SD.begin()) {                                        // SDカードの初期化
    Serial.println("Card failed, or not present");          // シリアルコンソールへの出力
    M5.Lcd.println("Card failed, or not present");  
    while (1);
  }
  Serial.println("microSD card initialized.");              // シリアルコンソールへの出力
  //M5.Lcd.println("microSD card initialized.");              // シリアルコンソールへの出力

  if ( SD.exists("/SSID.txt")) {                            // ファイルの存在確認（SSID.ini）
    Serial.println("SSID.txt exists.");                     // ファイルがある場合の処理
    //M5.Lcd.println("SSID.txt exists.");                     // ファイルがある場合の処理
    delay(500);
    File myFile = SD.open("/SSID.txt", FILE_READ);          // 読み取り専用でファイルを開く

    if (myFile) {                                           // ファイルが正常に開けた場合
      Serial.println("/SSID.txt Content:");
      //M5.Lcd.println("/SSID.txt Content:");
      while (myFile.available()) {                          // ファイル内容を順に変数に格納
        JsonData.concat(myFile.readString());
      }
      myFile.close();                                       // ファイルのクローズ
      sdstat = 1;
    } else {
      Serial.println("error opening /SSID.txt");
      M5.Lcd.println("error opening /SSID.txt");  
      sdstat = 0;
    }
  } else {
    Serial.println("SSID.txt doesn't exit.");               // シリアルコンソールへの出力
    M5.Lcd.println("SSID.txt doesn't exit.");               // ファイルが存在しない場合
    sdstat = 0;
  } 
}

void read_json_wifi_info(){ //SSID/pass読み出し関数
  DeserializationError error = deserializeJson(n_jsondata, JsonData); // JSON形式データの読み込み
  
  if (error) {                                            // JSON形式データ読み込みエラーの場合
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());                        // エラーメッセージのディスプレイ表示
    M5.Lcd.print(F("deserializeJson() failed: "));
    M5.Lcd.println(error.f_str());                        // エラーメッセージのディスプレイ表示
  } else {                                                // 正常な場合
    i_ssid = n_jsondata["ssid"].as<String>();             // "ssid"の値を取得             
    i_pass = n_jsondata["pass"].as<String>();             // "pass"の値を取得

    Serial.println("Can read from JSON Data!");           // シリアルコンソールへの出力
    //M5.Lcd.println("Can read from JSON Data!");           // シリアルコンソールへの出力
    Serial.print("ID: ");
    Serial.println(i_ssid);                               // "ssid"の値をディスプレイ表示
    Serial.print("PW: ");
    Serial.println(i_pass);                               // "pass"の値をディスプレイ表示
  }
}

void connect_wifi(){  //WIFIアクセスポイント接続関数
 M5.Lcd.setCursor(0, 208);
  Serial.print("Conecting Wi-Fi ");                       // シリアルコンソールへの出力
  M5.Lcd.print("Conecting Wi-Fi ");                       // シリアルコンソールへの出力

  char buf_ssid[33], buf_pass[65];                        // SSID,パスワードをChar型へ変更
  i_ssid.toCharArray(buf_ssid, 33);
  i_pass.toCharArray(buf_pass, 65);

  WiFi.begin(buf_ssid, buf_pass);                         // Wi-Fi接続開始
  // Wi-Fi接続の状況を監視（WiFi.statusがWL_CONNECTEDになるまで繰り返し 
  while (WiFi.status() != WL_CONNECTED) { 
    delay(500); 
    Serial.print("."); 
    M5.Lcd.print("."); 
  } 
  
  Serial.print("");                                     // Wi-Fi接続結果をディスププレイへ出力
  Serial.println("WiFi connected");
  M5.Lcd.println("WiFi connected"); 
  Serial.print("IP address: "); 
  Serial.println(WiFi.localIP());                         // IPアドレスをディスププレイへ出力
}

void time_sync(const char* ntpsrv, long gmt_offset, int daylight_offset) {//時刻同期関数

  configTime(gmt_offset, daylight_offset, ntpsrv);          // NTPサーバと同期

  if (getLocalTime(&timeInfo)) {                            // timeinfoに現在時刻を格納
    Serial.print("NTP : ");                                 // シリアルモニターに表示
    Serial.println(ntpsrv);                                 // シリアルモニターに表示

    sprintf(buf, "%04d-%02d-%02d %02d:%02d:%02d\n",     // 表示内容の編集
    timeInfo.tm_year + 1900, timeInfo.tm_mon + 1, timeInfo.tm_mday,
    timeInfo.tm_hour, timeInfo.tm_min, timeInfo.tm_sec);

    Serial.println(buf);                                    // シリアルモニターに表示
    M5.Lcd.println(buf);                                    // シリアルモニターに表示
  }
  else {
    Serial.print("NTP Sync Error ");                        // シリアルモニターに表示
    M5.Lcd.print("NTP Sync Error ");                        // シリアルモニターに表示
  }
}

void writecom(int size, int value[]){//センサ送信関数
  for (int i=0;i<size;i++){
    GroveA.write(value[i]);
  }
  while (GroveA.available()>0){
    char t = GroveA.read();
  }
  Serial.print("From M5stack:");Serial.print(" ");
  for (int i=0;i<size;i++){
    Serial.print(value[i],HEX);Serial.print(" "); 
  }
  Serial.print(flag);  Serial.println("send");
}

void receive(int valn){//センサ受信関数
  int val[valn]={0};
  if(GroveA.available()>0){
    for (int i=0; i<valn;i++){
      val[i]=GroveA.read();
    }
  }
  while (GroveA.available()>0){
    char t = GroveA.read();
  }
  Serial.print(flag);Serial.print("fromsensor");
  for (int i=0;i<valn;i++){
    Serial.print(val[i],HEX);;Serial.print(" "); 
  }
  Serial.print(flag);Serial.println("receive");
  if((val[1]==8)&&(val[3]==1)){
    flag=1;
    Serial.println("read/measured");
    for (int i=0; i<valn;i++){
      Serial.print(val[i],HEX);Serial.print(" ");
    }
  }else{
    Serial.println("readonly");
  }
}

void receive2(int valn){//センサ受信関数2
  valn=21;
  int val[valn]={0};
  if(GroveA.available()>0){
    for (int i=0; i<valn;i++){
      val[i]=GroveA.read();
    }
  }
  while (GroveA.available()>0){
    char t = GroveA.read();
  }
  Serial.print(flag);Serial.print("fromsensor");
  for (int i=0;i<valn;i++){
    Serial.print(val[i],HEX);;Serial.print(" "); 
  }
  Serial.print(flag);Serial.println("receive");

  if((val[1]==8)&&(val[3]==1)){
    flag=1;
    Serial.println("read/measured");
    for (int i=0; i<valn;i++){
      Serial.print(val[i],HEX);Serial.print(" ");
    }
  }else{
    Serial.println("readonly");
  }
  float temp=0;
  float bulk=0;
  float VWC=0;
  float VWCR=0;
  float VWCC=0;
  float pore=0;
  temp=(val[3]+val[4]*256)*0.0625;
  bulk=(val[5]+val[6]*256)*0.001;
  VWC=(val[9]+val[10]*256)*0.1;
  VWCR=(val[7]+val[8]*256)*0.1;
  VWCC=(val[11]+val[12]*256)*0.1;
  pore=(val[15]+val[16]*256)*0.001;
  display(flag,temp,bulk,VWC,pore,VWCR,VWCC);

}

void display(int flag2,float temp2,float bulk2,float VWC2,float pore2,float VWCR2,float VWCC2){//測定値表示関数
 if(flag2==1) {
  Serial.print(flag);Serial.println("display");
  Serial.print(",");Serial.print(temp2);
  Serial.print(",");Serial.print(bulk2);
  Serial.print(",");Serial.print(VWC2);
  Serial.print(",");Serial.print(pore2);Serial.println(",");

  //M5.Lcd.clear();
  M5.Lcd.setCursor(0, 32);
  M5.Lcd.setTextColor(YELLOW); 
  M5.Lcd.print("Temp   ");M5.Lcd.print(temp2);M5.Lcd.println(" deg");
  M5.Lcd.print("ECbulk  ");M5.Lcd.print(bulk2);M5.Lcd.println(" dS/m");
  M5.Lcd.print("VWC     ");M5.Lcd.print(VWC2);M5.Lcd.println(" %");
  M5.Lcd.print("ECpore  ");M5.Lcd.print(pore2);M5.Lcd.println(" dS/m");

 }
}

void displayBatteryLevel(){//バッテリー表示関数
   if (currentMillis - lastupdateMillis > 1000) {
      //  M5.Lcd.fillScreen(BLACK); // 背景色
        int battlevel = 0;
        byte retval;
        Wire.beginTransmission(0x75);
        Wire.write(0x78);
        if (Wire.endTransmission(false) == 0 && Wire.requestFrom(0x75, 1)) {
            retval = Wire.read() & 0xF0;
            if (retval == 0xE0) battlevel = 25;
            else if (retval == 0xC0) battlevel = 50;
            else if (retval == 0x80) battlevel = 75;
            else if (retval == 0x00) battlevel = 100;
        }
        if (lastbattery != battlevel){
            M5.Lcd.fillRect(250, 5, 56, 21, RGB(31, 63, 31));
            M5.Lcd.fillRect(306, 9, 4, 13, RGB(31, 63, 31));
            M5.Lcd.fillRect(252, 7, 52, 17, RGB(0, 0, 0));
            if (battlevel <= 25)
                M5.Lcd.fillRect(253, 8, battlevel/2, 15, RGB(31, 20, 10));
            else
                M5.Lcd.fillRect(253, 8, battlevel/2, 15, RGB(20, 40, 31));
            lastbattery = battlevel;
        }
        lastupdateMillis = currentMillis;
    }

}

void Clock_screen_display() {//表示関数
  //M5.Lcd.setTextColor(YELLOW); 
  //  M5.Lcd.fillRect(0, 50, 320, 190, BLACK);                           // 「分」が変わったら画面全体を書き換え Rewrite the entire screen when the "minute" changes.
  
  //M5.Lcd.setTextSize(3);    // 文字サイズ（整数倍率）
  //バッテリ表示部

  //時刻表示部
  static const char *_wd[7] = {"Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat"};  // 曜日の定義　

  if (getLocalTime(&timeInfo)) {                            // timeinfoに現在時刻を格納
    delay(500);
    // 画面書き換え処理　Screen rewriting process.
    if (smin == timeInfo.tm_min) {                          // 分単位の変更がかかったかどうか確認
      M5.Lcd.fillRect(72, 16, 24, 16, BLACK);             // 「秒」だけが変わった場合、秒表示エリアだけ書き換え Rewrite only the display area of seconds.
    } else {
      M5.Lcd.fillRect(0, 0, 200, 50, BLACK);                           // 「分」が変わったら画面全体を書き換え Rewrite the entire screen when the "minute" changes.
    }

    // 数字・文字表示部分
    // 日付表示
    M5.Lcd.setTextColor(WHITE);             
    M5.Lcd.setCursor(0, 0);                 
    M5.Lcd.printf("%04d/%02d/%02d %s\n",  timeInfo.tm_year + 1900, timeInfo.tm_mon + 1, timeInfo.tm_mday, _wd[timeInfo.tm_wday]);

    // 時刻表示

    M5.Lcd.printf("%02d:%02d", timeInfo.tm_hour, timeInfo.tm_min); // 時分を表示

    // 秒表示
    M5.Lcd.printf(":%02d\n", timeInfo.tm_sec);              // 秒を表示
    M5.Lcd.println("");           
    smin = timeInfo.tm_min;                                 //表示した「分」を保存
  }
}

void program(){ //サブループ関数
  //測定開始
  Serial.print("Start sensor");
  int  value[]={0X02,0X07,0X01,0X01,0X0D,0X70};
  writecom(6,value);
  delay(100);
  receive(6);//受信バイト数6

 //測定完了ステータス読み出し
  flag=0;
  while(flag==0){
    if (WiFi.status() == WL_CONNECTED) {
    //  delay(5000);
      //Wi-Fiからの切断
      Serial.println("Disconnect from WiFi"); 
      WiFi.disconnect();

     // Wi-Fi接続の状況を監視（WiFi.statusがWL_DISCONNECTEDになるまで繰り返し
      while (WiFi.status() !=WL_DISCONNECTED) {
        delay(500);
        Serial.print(".");
      }
      // Wi-Fi切断結果をシリアルモニタへ出力
      Serial.println("");
    }
    M5.update();                                              // M5状態更新　M5 status update.
    currentMillis = millis();
    displayBatteryLevel();
    //時刻表示
    Clock_screen_display();                                   // 時計表示　Clock display.
    Serial.print("Read status");
    int value1[]={0X01,0X08,0X01,0X00,0XE6,0X00};
    writecom(5,value1);
    delay(100);
    receive(6);//受信バイト数6
    delay(3000);//測定完了ステータス確認サイクル
  }
//測定データ読み出し
  int value2[]={0X01,0X13,0X10,0XFC,0X2C,0X00};
  writecom(5,value2);
  delay(100);
  receive2(21);//受信バイト数21
}

void setup() {
  M5.begin();                 // 本体初期化(LCD, SD, Serial, I2C)
  M5.Power.begin();           // 電源初期化
  Wire.begin();               //バッテリ表示用
  Serial.begin(9600);         // 標準のシリアル通信初期化（初期値はG3（RX）,G1（TX））
  GroveA.begin(9600);        // シリアル通信2初期化 (初期値は G16（RX）, G17（TX）)
    //LCD表示
  M5.Lcd.setTextColor(YELLOW); 
  M5.Lcd.fillScreen(BLACK); // 背景色
  M5.Lcd.setTextSize(3);    // 文字サイズ（整数倍率）
  M5.Lcd.setTextDatum(4);                                 // 中央基準
  M5.Lcd.drawString("Soil Sensor",M5.Lcd.width()/2, 120);   // 中央揃え(文字列, x座標, y座標, フォント)
  M5.Lcd.setTextDatum(0);  
  delay(1000);
  get_wifi_info();                                          // microSDカードからWi-Fi情報の取得
  if (sdstat == 1) {
    read_json_wifi_info();                                  // JSON形式データの読み出し
    connect_wifi();                                         // Wi-Fiアクセスポイントへの接続
  }
  time_sync(NTPSRV, GMT_OFFSET, DAYLIGHT_OFFSET);           // 時刻同期関数  
  M5.Lcd.fillScreen(BLACK); 
}

void loop() {
  program();
  int interval=3000;
    M5.Lcd.setCursor(0, 200);
    M5.Lcd.print("Interval:");M5.Lcd.print(interval);M5.Lcd.print("msec");
  delay(interval);//測定間隔(ms)
}
